generator erd {
  provider = "prisma-erd-generator"
  output   = "./erd.svg" // or specify your own path
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// users 

model User {
  id        Int      @id @default(autoincrement())
  fullName  String
  username  String   @unique
  email     String   @unique
  password  String
  role      Role     @default(ATTENDEE) // organizer or attendee
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  verified  Boolean  @default(false)

  // Relations
  events   Event[] // Events the user is organizing
  bookings Booking[] // Bookings made by the user

  @@map("users")
}

enum Role {
  ORGANIZER
  ATTENDEE
}

// events

model Event {
  id               Int           @id @default(autoincrement())
  title            String
  description      String
  category         EventCategory @default(OTHERS)
  date             DateTime
  venueId          Int
  venue            Venue         @relation(fields: [venueId], references: [id])
  price            Float
  totalTickets     Int
  availableTickets Int
  locationId       Int
  location         Location      @relation(fields: [locationId], references: [id])
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  organizerId Int
  organizer   User @relation(fields: [organizerId], references: [id])

  bookings Booking[]
  Section  Section[]
  Seat     Seat[]

  @@map("events")
}

enum EventCategory {
  MUSIC_CONCERTS
  STANDUP_COMEDY
  IMPROV_COMEDY
  THEATER_PERFORMANCES
  MUSICALS
  OPERA
  DANCE_PERFORMANCES
  MAGIC_SHOWS
  FESTIVALS
  SPORTS_EVENTS
  TALENT_SHOWS
  WORKSHOPS_CLASSES
  CONFERENCES_TALKS
  FAMILY_KIDS_EVENTS
  VIRTUAL_EVENTS
  OTHERS
}

// venue model
model Venue {
  id          Int      @id @default(autoincrement())
  name        String
  capacity    Int
  amenities   String[]
  description String?
  location    Location @relation(fields: [locationId], references: [id])
  locationId  Int
  events      Event[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Location model for venue details
model Location {
  id        Int      @id @default(autoincrement())
  address   String
  city      String
  state     String
  country   String
  venues    Venue[] //Venues associated with this location
  events    Event[] // Events associated with this location
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// sections like VIP
model Section {
  id        Int      @id @default(autoincrement())
  name      String
  rows      Row[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  eventId   Int?
  Event     Event?   @relation(fields: [eventId], references: [id])
}

// Rows in each section (e.g., Row A, Row B)
model Row {
  id        Int      @id @default(autoincrement())
  rowNumber Int
  section   Section  @relation(fields: [sectionId], references: [id])
  sectionId Int
  seats     Seat[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// bookings

model Booking {
  id           Int           @id @default(autoincrement())
  eventId      Int
  userId       Int
  ticketCounts Int
  totalPrice   Float
  status       BookingStatus @default(PENDING)
  createdAt    DateTime      @default(now())

  event Event @relation(fields: [eventId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  // Relations
  seats    Seat[]
  payments Payment[]

  @@map("bookings")
}

model Payment {
  id              Int           @id @default(autoincrement())
  booking         Booking       @relation(fields: [bookingId], references: [id])
  bookingId       Int           @unique
  amount          Float
  paymentProvider String
  paymentStatus   PaymentStatus @default(PENDING)
  transactionId   String?
  paymentResponse Json?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@map("payments")
}

enum PaymentStatus {
  PENDING
  SUCCESSFUL
  FAILED
  REFUNDED
}

enum BookingStatus {
  FAILED
  PENDING
  SUCCESSFUL
}

// seats

model Seat {
  id         Int        @id @default(autoincrement())
  seatNumber Int
  row        Row        @relation(fields: [rowId], references: [id])
  rowId      Int
  status     SeatStatus @default(AVAILABLE)
  bookings   Booking?   @relation(fields: [bookingId], references: [id]) // Relation to booking

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Event     Event?   @relation(fields: [eventId], references: [id])
  eventId   Int?

  bookingId Int? // Foreign key for booking
}

enum SeatStatus {
  AVAILABLE
  BOOKED
  LOCKED
}
